__author__ = "Martin Rippin"
__copyright__ = "Copyright 2021, Martin Rippin"
__email__ = "martin.rippin@igp.uu.se"
__license__ = "GPL-3"


include: "rules/common.smk"


rule all:
    input:
        unpack(compile_output_list),


module cnv_sv:
    snakefile:
        github(
            "hydra-genetics/cnv_sv",
            path="workflow/Snakefile",
            tag=config["modules"]["cnv_sv"],
        )
    config:
        config


use rule * from cnv_sv as cnv_sv_*


use rule config_manta_tn from cnv_sv as cnv_sv_config_manta_tn with:
    input:
        bam_t="parabricks/fq2bam/{sample}_T.bam",
        bam_n="parabricks/fq2bam/{sample}_N.bam",
        ref=config["reference"]["fasta"],


use rule manta_run_workflow_tn from cnv_sv as cnv_sv_manta_run_workflow_tn with:
    input:
        bam_t="parabricks/fq2bam/{sample}_T.bam",
        bam_n="parabricks/fq2bam/{sample}_N.bam",
        ref=config["reference"]["fasta"],
        scrpt="cnv_sv/manta/{sample}/runWorkflow.py",

use rule * from prealignment as prealignment_*

module parabricks:
    snakefile: github("hydra-genetics/parabricks", path="workflow/Snakefile", tag=config["modules"]["parabricks"])
    config: config

use rule * from parabricks as parabricks_*

module qc:
    snakefile: github("hydra-genetics/qc", path="workflow/Snakefile", tag=config["modules"]["qc"])
    config: config

use rule * from qc as qc_*
    
use rule mosdepth from qc as qc_mosdepth with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",

use rule picard_alignment_summary_metrics from qc as qc_picard_alignment_summary_metrics with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],

use rule picard_duplication_metrics from qc as qc_picard_duplication_metrics with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",

use rule picard_collect_gc_bias_metrics from qc as qc_picard_collect_gc_bias_metrics with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],

use rule picard_collect_multiple_metrics from qc as qc_picard_collect_multiple_metrics with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],

use rule picard_collect_wgs_metrics from qc as qc_picard_collect_wgs_metrics with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],
        interval=config["reference"]["wgs_intervals"],

use rule samtools_stats from qc as qc_samtools_stats with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",
